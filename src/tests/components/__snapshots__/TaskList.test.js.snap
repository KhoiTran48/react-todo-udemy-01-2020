// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`render task list 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <TaskList
    listTask={
        Array [
            Object {
              "deadline": 0,
              "desc": "",
              "taskId": 1,
              "title": "JS",
            },
            Object {
              "deadline": 1000,
              "desc": "",
              "taskId": 2,
              "title": "PHP",
            },
            Object {
              "deadline": 2000,
              "desc": "",
              "taskId": 3,
              "title": "ASP",
            },
          ]
    }
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <TaskInfo
          deadline={0}
          desc=""
          taskId={1}
          title="JS"
/>,
        <TaskInfo
          deadline={1000}
          desc=""
          taskId={2}
          title="PHP"
/>,
        <TaskInfo
          deadline={2000}
          desc=""
          taskId={3}
          title="ASP"
/>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": "0",
        "nodeType": "class",
        "props": Object {
          "deadline": 0,
          "desc": "",
          "taskId": 1,
          "title": "JS",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": "1",
        "nodeType": "class",
        "props": Object {
          "deadline": 1000,
          "desc": "",
          "taskId": 2,
          "title": "PHP",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": "2",
        "nodeType": "class",
        "props": Object {
          "deadline": 2000,
          "desc": "",
          "taskId": 3,
          "title": "ASP",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <TaskInfo
            deadline={0}
            desc=""
            taskId={1}
            title="JS"
/>,
          <TaskInfo
            deadline={1000}
            desc=""
            taskId={2}
            title="PHP"
/>,
          <TaskInfo
            deadline={2000}
            desc=""
            taskId={3}
            title="ASP"
/>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": "0",
          "nodeType": "class",
          "props": Object {
            "deadline": 0,
            "desc": "",
            "taskId": 1,
            "title": "JS",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": "1",
          "nodeType": "class",
          "props": Object {
            "deadline": 1000,
            "desc": "",
            "taskId": 2,
            "title": "PHP",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": "2",
          "nodeType": "class",
          "props": Object {
            "deadline": 2000,
            "desc": "",
            "taskId": 3,
            "title": "ASP",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    Symbol(enzyme.__providerValues__): undefined,
  },
  Symbol(enzyme.__providerValues__): Map {},
  Symbol(enzyme.__childContext__): null,
}
`;
